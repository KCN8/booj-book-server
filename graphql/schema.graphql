"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @all
    user(id: ID @eq): User @find
    books: [Book] @all
    book(id: ID @eq): Book @find
    genres: [Genre] @all
    genre(id: ID @eq): Genre @find
    featuredBooks(featured: Boolean! @eq): [Book] @all
    searchBookTitle(search: String!): [Book]
}

type Mutation {
    createUser(
        name: String!
        email: String! @rules(apply: ["email", "unique:users,email"])
        password: String! @rules(apply: ["min:6"])
    ): User @create

    updateUser(
        id: ID!
        name: String
        email: String @rules(apply: ["email", "unique:users,email"])
    ): User @update

    deleteUser(
        id: ID!
    ): User @delete

    createGenre(
        name: String! @rules(apply: ["unique:genres,name"])
    ): Genre @create

    updateGenre(
        id: ID!
        name: String @rules(apply: ["unique:genres,name"])
    ): Genre @update

    deleteGenre(
        id: ID!
    ): Genre @delete

    createBook(
        title: String!
        author: String!
        image: String
        link: String
        description: String
        featured: Boolean
        genre_id: Int!
    ): Book @create

    updateBook(
        id: ID!
        title: String
        author: String
        image: String
        link: String
        description: String
        featured: Boolean
        genre_id: Int
    ): Book @update

    deleteBook(
        id: ID!
    ): Book @delete
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Genre {
    id: ID!
    name: String!
    books: [Book] @hasMany
}

type Book {
    id: ID!
    title: String!
    author: String!
    image: String
    link: String
    description: String
    featured: Boolean
    genre: Genre! @belongsTo
}
